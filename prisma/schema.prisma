generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  name            String
  email           String            @unique
  phone           String
  password        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  role            Role              @default(user)
  properties      Property[]
  favorites       Favorite[]
  comments        PropertyComment[]
  blocked         Boolean?          @default(false)
  userDescription String?
}

enum Role {
  admin
  user
}

model Property {
  id           Int          @id @default(autoincrement())
  title        String
  description  String
  address      String
  city         String
  price        Float
  area         Float?
  lotSize      Float?
  bedrooms     Int
  bathrooms    Float
  yearBuilt    Int?
  type         PropertyType
  listingType  ListingType
  features     Json?
  isFeatured   Boolean      @default(false)
  mainImageUri String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())

  ownerId   Int
  owner     User       @relation(fields: [ownerId], references: [id])
  favorites Favorite[]

  images       PropertyImage[]
  reports      PropertyReport[]
  availability PropertyAvailability[]
  comments     PropertyComment[]
}

model PropertyImage {
  id        Int      @id @default(autoincrement())
  url       String
  order     Int
  createdAt DateTime @default(now())

  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

enum PropertyType {
  Casa
  Apartamento
  Condominio
  Adosado
  Terreno
  ANY
}

enum ListingType {
  Venta
  Alquiler
  ANY
}

model PropertyReport {
  id         Int      @id @default(autoincrement())
  reason     String
  message    String?
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  createdAt  DateTime @default(now())
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expiresAt DateTime
}

model Favorite {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
  createdAt  DateTime @default(now())

  @@unique([userId, propertyId])
}

model PropertyAvailability {
  id         Int      @id @default(autoincrement())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model PropertyComment {
  id         Int      @id @default(autoincrement())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  comment    String
  rating     Int?      // Rating from 1 to 5 stars
  createdAt  DateTime @default(now())
}
